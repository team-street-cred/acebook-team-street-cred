require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LikesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # adjust the attributes here as well.
  let(:user) { User.first }

  let(:valid_attributes) {
    { post_id: user.posts.first.id,
      user_id: user.id
    }
  }

  let(:invalid_attributes) {
    { user_id: 555,
      post_id: 555
    }
  }

  let(:invalid_create) {
    post :create, params: invalid_attributes
  }

  before(:each) do
    sign_in User.find_by_id(User.first.id)
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Like" do
        expect {
          post :create, params: { user_id: 1, post_id: 2 }
        }.to change(Like, :count).by(1)
      end

      it "creates only one Like" do
        post :create, params: valid_attributes
        expect {
          post :create, params: valid_attributes
        }.to change(Like, :count).by(0)
      end

      it "redirects to the posts index" do
        post :create, params: valid_attributes
        expect(response).to redirect_to(posts_path)
      end
    end

    context "with invalid params" do
      it "returns a RecordNotFound exception" do
        expect { invalid_create }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { post_id: 2 }
      }

      # it "updates the requested post" do
      #   like = Like.create! valid_attributes
      #   put :update, params: { id: 1, post: new_attributes }
      #   like.reload
      #   expect(like.post_id).to eq(2)
      # end

    #   it "redirects to the post index" do
    #     post = Post.create! valid_attributes
    #     put :update, params: { id: post.to_param, post: valid_attributes }
    #     expect(response).to redirect_to(posts_url)
    #   end
    # end
    #
    # context "with invalid params" do
    #   it "raise a RecordNotFound exception)" do
    #     # post = Post.create! valid_attributes
    #     # put :update, params: { id: post.to_param, post: invalid_attributes }
    #
    #     expect {invalid_update}.to raise_error(ActiveRecord::RecordNotFound)
    #   end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested like" do
      like = Like.create! valid_attributes
      expect {
        delete :destroy, params: { id: like.to_param, user_id: like.user_id, post_id: 1 }
      }.to change(Like, :count).by(-1)
    end

    it "redirects to the posts list" do
      like = Like.create! valid_attributes
      delete :destroy, params: { id: like.to_param, user_id: like.user_id, post_id: 1 }
      expect(response).to redirect_to(posts_url)
    end
  end

  describe "Custom destroy link should work" do
    it "deletes a like" do
      post :create, params: valid_attributes
      expect {
        post :destroy_like_on_post, params: valid_attributes
      }.to change(Like, :count).by(-1)
    end
  end

end
